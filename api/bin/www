#!/usr/bin/env node



/**
 * Module dependencies.
 */
const axios = require('axios');
const { json } = require('express');
const socketIo = require("socket.io")
var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//instanciando io socket e começo da logica conexão porta com. 

const io = require('socket.io')(server)
  io.emit('serial:data',{
    value: "TESTE"  })
    /*  
io.sockets.on('connection', function(socket){
  console.log('conexão realizada com a web') 
  console.log(io.sockets.server.engine.clientsCount);
 socket.on('btnAction',function(btn){
    var dadoweb = btn.value
    console.log("dadoweb : " + dadoweb)   
    console.log(io.sockets.server.engine.clientsCount);
    if(dadoweb ==="a"){
      console.log("enviou dado")     
    }else{    
      console.log("enviou dado")      
    }
    socket.disconnect(true)
        })   

   }) */

//logica tickets for development

const Imprimir = require('../controllers/imprimirCOM');



var path = require( 'path' );
const SerialPort = require('serialport')
const Readline = require('@serialport/parser-readline')

var fs = require("fs");      
var com1 =''

const config = fs.readFileSync("./Config.json" , "utf8", )
console.log(config)
var jsonData = JSON.parse(config); 

com1 = jsonData



function ConectaImpressora(novoTicket){
  console.log("executando impressão : ticket : " + novoTicket)
  var igm=''
var teste =''
  const escpos = require('escpos');
  escpos.SerialPort = require('escpos-serialport');
   
  const serialDeviceOnWindows = new escpos.SerialPort('COM3');

  const options = { encoding: "GB18030" /* default */ }
  const bwipjs = require('bwip-js');
// encoding is optional
bwipjs.toBuffer({
  bcid:        'code128',       // Barcode type
  text:       novoTicket,   // Text to encode
  scale:       3,               // 3x scaling factor
  height:      10,              // Bar height, in millimeters
  includetext: false,            // Show human-readable text
  textxalign:  'center',        // Always good to set this
}, function (err, png) {
  if (err) {
      // `err` may be a string or Error object
  } else {
    igm = png
   console.log(typeof(img))
   let buff = new Buffer(igm , 'base64');
 teste =  fs.writeFileSync('./public/arquivos/barras.png', igm );

 const printer = new escpos.Printer(serialDeviceOnWindows, options);
const tux = path.join('./public/arquivos/barras.png');

escpos.Image.load(tux, function(image){
serialDeviceOnWindows.open(function(error){
  printer.align('ct')
  .size(1,1)
  .text('Bem-vindo')
  .text('a Padaria')
  .text('')
  .size(2,2)
  .text(novoTicket)  
  .image(image)
  .then(() => { 
  printer.align('ct')
  .size(0,0)
  .text('')
  .text('após as compras')
  .text('apresentar este ticket')
  .text('no caixa')
     printer.cut().close(); 
  });
});
});
 
      // `png` is a Buffer
      // png.length           : PNG file length
      // png.rseadUInt32BE(16) : PNG image width
      // png.readUInt32BE(20) : PNG image height
  }
});
 

  }

  function ConectaImpressoraDATAMAXI(novoTicket){
    console.log("executando impressão : ticket : " + novoTicket)
    var igm=''
  var teste =''
    const escpos = require('escpos');
    escpos.SerialPort = require('escpos-serialport');
     
    const serialDeviceOnWindows = new escpos.SerialPort('COM3');
  
    const options = { encoding: "GB18030" /* default */ }
    const bwipjs = require('bwip-js');
  // encoding is optional
  bwipjs.toBuffer({
    bcid:        'ean13',       // Barcode type
    text:       '11111110'+novoTicket,   // Text to encode
    scale:       3,               // 3x scaling factor
    height:      10,              // Bar height, in millimeters
    includetext: false,            // Show human-readable text
    textxalign:  'center',        // Always good to set this
  }, function (err, png) {
    if (err) {
        // `err` may be a string or Error object
    } else {
      igm = png
     console.log(typeof(img))
     let buff = new Buffer(igm , 'base64');
   teste =  fs.writeFileSync('./public/arquivos/barras.png', igm );
  
   const printer = new escpos.Printer(serialDeviceOnWindows, options);
  const tux = path.join('./public/arquivos/barras.png');
  
  escpos.Image.load(tux, function(image){
  serialDeviceOnWindows.open(function(error){
    printer.align('ct')
    .size(1,1)
    .text('Bem-vindo')
    .text('a Padaria')
    .text('')
    .size(2,2)
    .text(novoTicket)  
    .image(image)
    .then(() => { 
    printer.align('ct')
    .size(0,0)
    .text('')
    .text('após as compras')
    .text('apresentar este ticket')
    .text('no caixa')
       printer.cut().close(); 
    });
  });
  });
   
        // `png` is a Buffer
        // png.length           : PNG file length
        // png.rseadUInt32BE(16) : PNG image width
        // png.readUInt32BE(20) : PNG image height
    }
  });
   
  
    }




function getTicketSQG() {
if(com1.TIPO == 2) {  
    return  axios.get(com1.API + '/cancela-estacionamento/ticket_Geracao.php').then(function (response) {
      return response.data
    })
    .catch(function (error) {
      console.log("Tratar erro de conexão")
      return error
    })
  }else{    
    return  axios.get(com1.API + "v1/consumos/proximo/?modo_venda=4&abre=true", {auth: { username: com1.USUARIO, password: com1.SENHA}}).then(function (response) {
      return response.data
    })
    .catch(function (error) {
      console.log("Tratar erro de conexão")
      return error
    })
  } 
}
function setTicketSQG(numero) {
//  função saida 
if(com1.TIPO == 2) { 

    return  axios.get(com1.API + '/cancela-estacionamento/ticket_Consulta.php?ticket='+ numero,  {timeout: 1000},).then(function (response) {
      return response.data
    })
    .catch(function (error) {
      console.log("Tratar erro de conexão")
      return error
    })
  }else{
    return  axios.get(com1.API + "v1/consumos/checkout/?modo_venda=4&codigo=" + numero, {auth: { username: com1.USUARIO, password: com1.SENHA}}).then(function (response) {
      return response.data
    })
    .catch(function (error) {
      console.log("Tratar erro de conexão")
      return error
    })
  } 
}
function getUserAccount() {
  return 'teste2';
}

//Imprimir.SaidaDatamaxi()
const liberaHorario = '0;1;1;\r'
const liberaAntHorario = '0;2;1;\r' 

//Conectando na ENTRADA 
if(com1.ENTRADA != ''){

 function Conecta(){  
  var port = new SerialPort(com1.ENTRADA, {
    baudRate: 115200,
    dataBits: 8,
    parity: 'none',
    stopBits: 1,
    flowControl: false,
    autoOpen:true
  })   
  const parser = port.pipe(new Readline({ delimiter: '\r' }))
   console.log('conectando COM ENTRADA ...')
    port.on('open',(err) => {
      if (err) {
        console.log("deu erro ao conectar COM ENTRADA: " + err)
        statusCom1 = 1
      }else{          
      console.log('conectado COM ENTRADA')
          
    }});
    var timestamp = 1
    var timeout = 0    
    let ultimoTicket = ''
    let status =0
    parser.on('data', async function (data){  
      console.log("recebeu da com ENTRADA : " + data)   
      console.log(com1.TEMPONOVAIMPRESSAO)   
      timestamp = new Date().getTime(); 

        if(data === '0;14;1;' && timestamp >= timeout  ){                  
                        
          let data = new Date().getTime();
          if(com1.TIPO ==1 && status > 0)
          {
            console.log("Aguarde o giro")
          }else{
     
            timeout = timestamp + com1.TEMPONOVAIMPRESSAO
          if(com1.INTEGRADOR == 1){

                  console.log("Integrador SQG")              
                  Promise.all([getTicketSQG()])
                  .then(function (results) {
                    const perm  = results[0];   
                    console.log(perm) 
                    if(com1.TIPO ==1){      
                      var novoTicket = perm.dados.codigoBarra                      
                      novoTicket = ("00000000" + novoTicket).slice(-8)  
                    console.log("novo ticket = " + novoTicket)                 
                    
                    }else{ 
                      var novoTicket = perm[0].ticket
                      novoTicket = ("00000000" + novoTicket).slice(-8)
                    } 
                    console.log(novoTicket)                         

                  if(novoTicket>0 ){
                    ultimoTicket = novoTicket
                    console.log("função imprimir")
                    ConectaImpressora(novoTicket)
                    setTimeout(function(){
                      status = 1
                      if(com1.SENTIDOENTRADA == 1){
                        port.write(liberaHorario)
                      }else if(com1.SENTIDOENTRADA == 2){
                        port.write(liberaAntHorario)
                      }                      
                    },3000) 
                    io.emit('serial:data',{
                        value: "IMPRESSAO"  })            
                   }                  
                });     
               
                  
          }else if(com1.INTEGRADOR == 2){   //integração com datamaxi
            //função ler sequencial e pegar um numero (a implementar) 
           // let novoTicket = new Date().getMinutes();
            //pega o arquivo sequencial incrementa e edita o arquivo com o novo valor.
            //const config = fs.readFileSync("./sequencial.json" , "utf8", )   
            
          var novoTicket =''
          var jsonData2 = fs.readFileSync("./sequencial.json", "utf8");
          var jsonData3 = JSON.parse(jsonData2); 
          console.log(jsonData3)
          novoTicket = jsonData3.TICKET
          novoTicket = novoTicket +1
          console.log(novoTicket)
             
              data = new Date()
              var novojson = { "TICKET" : novoTicket , "DATAULTIMO": data}
              novojson = JSON.stringify(novojson)
              fs.writeFile("./sequencial.json", novojson, (err) => {
                if (err) throw err;
                console.log('The file has been saved!');
              }); 
           // Imprimir.GerarDatamaxi(novoTicket) */
            if(novoTicket>0 ){
              ultimoTicket = novoTicket        

              console.log("função imprimir")
              ConectaImpressoraDATAMAXI(novoTicket)
              setTimeout(function(){
                status = 1
                if(com1.SENTIDOENTRADA == 1){
                  port.write(liberaHorario)
                }else if(com1.SENTIDOENTRADA == 2){
                  port.write(liberaAntHorario)
                }                      
              },3000) 
              io.emit('serial:data',{
                  value: "IMPRESSAO"  })            
             }       

          }        
              
        }  
     console.log("Ultimo ticket emitido foi : " +ultimoTicket)
    }
    

    if(data === '0;12;' && com1.TIPO == 1 ){
      status = 0
      console.log("acesso nao utilizado")
      if(ultimoTicket > 0){
        if(com1.INTEGRADOR == 1){  
        console.log("No sqg Realizar a saida via api")    
        Promise.all([setTicketSQG(ultimoTicket)])
        .then(function (results) {
          const perm  = results[0];   
          console.log(perm)                                               
      });  
    }
        ultimoTicket = 0;
        status = 0       
      }
    }
    })  
    
  port.on('close', function(){
    console.log("COM ENTRADA desconectado")
    port.close(error => {console.log("COM ENTRADA : " +error)})
    Conecta()
  
  })
  
  port.on('error', (err) => {
    console.log("COM ENTRADA desconectado : " + err)
    Conecta()
    }
  )
  }

 Conecta()
 
}

erro = 1
function ConectaSAIDA(sentido){
if(com1.SAIDA != '') {
 
     
    var port2 = new SerialPort(com1.SAIDA, {
      baudRate: 115200,
      dataBits: 8,
      parity: 'none',
      stopBits: 1,
      flowControl: false,
      autoOpen:true
    })   
    const parser2 = port2.pipe(new Readline({ delimiter: '\r' }))
     console.log('conectando COM SAIDA ...')
     port2.on('open',(err) => {
        if (err) {
          console.log("Erro ao Conectar COM SAIDA : " + err)
          
        }else{     

        console.log('conectado COM SAIDA')
        port2.write('0;1;1;\r')
            
      }});
  
      parser2.on('data', function (data){
        console.log("recebeu algo COM SAIDA : " + data )  
        if(data === '0;12;' && com1.TIPO == 1 ){
        //  status = 0
          console.log("acesso nao utilizado")
          port2.close(error => {console.log("COM SAIDA : " +error)})
        } 
        if(data === '0;10;' || data === '0;11;' ){
          //  status = 0
            console.log("acesso utilizado")
            port2.close(error => {console.log("COM SAIDA : " +error)})
          }
         
      })  
     // setTimeout(()=>{port2.close()},2000)
     if(com1.TIPO == 2 ){
      //  status = 0
      setTimeout(()=>{ port2.close(error => {console.log("COM SAIDA : " +error)})},2000)
      }  
      
      
    port2.on('close', function(){
      console.log("COM SAIDA : Desconectado")
      port2.close(error => {console.log("COM SAIDA : " +error)})
     
    
    })
    
    
   }
    
  
   

    
}

if(com1.LEITOR != '') {
  erro = 1
  function ConectaLEITOR(){
     
    var portleitor = new SerialPort(com1.LEITOR, {
      baudRate: 9600,
      dataBits: 8,
      parity: 'none',
      stopBits: 1,
      flowControl: false,
      autoOpen:true
    })   
    const parserleitor = portleitor.pipe(new Readline({ delimiter: '\r' }))
     console.log('conectando COM LEITOR ...')
     portleitor.on('open',(err) => {
        if (err) {
          console.log("Erro ao Conectar COM LEITOR : " + err)
          
        }else{     
        console.log('conectado COM LEITOR')            
      }});
  
      parserleitor.on('data', function (data){
        console.log("recebeu algo COM LEITOR : " + data )  
        if(com1.INTEGRADOR == 1){  
          console.log("No sqg Realizar a saida via api")    
          Promise.all([setTicketSQG(data)])
          .then(function (results) {
            const perm  = results[0];   
            console.log(perm)
            if(com1.TIPO ==1){
            if(perm.status.codigo== 400){
              console.log("retorno ao caixa")
              io.emit('serial:data',{
                value: "Retorno"  })   
            }else{
              io.emit('serial:data',{
                value: "Saida"  })   
              if(com1.SENTIDOENTRADA == 1){
                port2.write(liberaHorario)
              }else if(com1.SENTIDOENTRADA == 2){
                port2.write(liberaAntHorario)
              }  
            } 
          }else{
            if(perm[0].status == 'VL'){
              io.emit('serial:data',{
                value: "Saida"  }) 
              if(com1.SENTIDOENTRADA == 1){
                ConectaSAIDA("horario")
            }else if(com1.SENTIDOENTRADA == 2){
              ConectaSAIDA("anthorario")
            }        

            }else{
              io.emit('serial:data',{
                value: "Retorno"  }) 
                console.log("retorno ao caixa")
            } 
          }                                             
        });  
      }  if(com1.INTEGRADOR == 2){

        Promise.all([Imprimir.SaidaDatamaxi(data)])
        .then(function (results) {   
          console.log("resulta foi : " + results)
          
          if(results == 'LB'){
            console.log("Saida Liberada")
          }
          if(results =='NL'){
            console.log("retorne ao caixa")
          }
          if(results =='UT'){
            console.log("Já utilizado")
          }

        })

        
        console.log("DATAMAXI Realizar a saida via api")
        
      }     
      })  
      
      portleitor.on('close', function(){
      console.log("COM LEITOR : Desconectado")
      portleitor.close(error => {console.log("COM LEITOR : " +error)})
      ConectaSAIDA()  
    
    })
    
    
    portleitor.on('error', (err) => {
     
      ConectaLEITOR()      
      
        console.log("COM LEITOR desconectado : " + err)

    
     } )}
    
  
   ConectaLEITOR()

    
}

/* //const portaImpressora = new SerialPort('COM12')

var portaImpressora = new SerialPort('COM12', {
  baudRate: 115200  
})   
  
portaImpressora.on('open', (err) => {
  if(err) console.log("deu erro ao conectar : " + err)
  const imprimir = 'TeSTANDOOOOO'
  portaImpressora.write(imprimir)
}) */








/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
