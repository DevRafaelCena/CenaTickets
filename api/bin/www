#!/usr/bin/env node



/**
 * Module dependencies.
 */
const axios = require('axios');
const { json } = require('express');
const socketIo = require("socket.io")
var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//instanciando io socket e começo da logica conexão porta com. 

const io = require('socket.io')(server)
  io.emit('serial:data',{
    value: "TESTE"  })
    /*  
io.sockets.on('connection', function(socket){
  console.log('conexão realizada com a web') 
  console.log(io.sockets.server.engine.clientsCount);
 socket.on('btnAction',function(btn){
    var dadoweb = btn.value
    console.log("dadoweb : " + dadoweb)   
    console.log(io.sockets.server.engine.clientsCount);
    if(dadoweb ==="a"){
      console.log("enviou dado")     
    }else{    
      console.log("enviou dado")      
    }
    socket.disconnect(true)
        })   

   }) */

//logica tickets for development

const Imprimir = require('../controllers/imprimirCOM');

var path = require( 'path' );
const SerialPort = require('serialport')
const Readline = require('@serialport/parser-readline')

var fs = require("fs");      
var com1 =''

const config = fs.readFileSync("./Config.json" , "utf8", )
console.log(config)
var jsonData = JSON.parse(config); 

com1 = jsonData

function getTicketSQG() {


if(com1.TIPO == 2) {  
  var Dadojson = [{     
    "mensagem": "100000-Ticket criado com sucesso.",
    "ticket": 32,
    "data": "2020-11-24 10:24:26"
    }]  
    return  axios.get(com1.API + '/cancela-estacionamento/ticket_Geracao.php').then(function (response) {
      return Dadojson
    })
    .catch(function (error) {
      console.log("Tratar erro de conexão")
      return Dadojson
    })
  }else{
    var Dadojson = {
      "dados":{"codigo":6200004,"codigoBarra":"6200004"},
      "status":{"codigo":200,"mensagem":null,"quantidade":1,"tipo":"OK"}
      }      
    return  axios.get(com1.API + "consumos/proximo/?modo_venda=4&abre=true", {auth: { username: com1.USUARIO, password: com1.SENHA}}).then(function (response) {
      return Dadojson
    })
    .catch(function (error) {
      console.log("Tratar erro de conexão")
      return Dadojson
    })
  } 
}
function setTicketSQG(numero) {
//  função saida 
if(com1.TIPO == 2) { 
  var Dadojson = [
    {
    "mensagem": "100000-OK",
    "status": "VL"
    }
   ]
    return  axios.get(com1.API + '/cancela-estacionamento/ticket_Consulta.php?ticket='+ numero,  {timeout: 1000},).then(function (response) {
      return Dadojson
    })
    .catch(function (error) {
      console.log("Tratar erro de conexão")
      return "Dadojson"
    })
  }else{
    var Dadojson = {
      "dados":{"codigo":6200004,"codigoBarra":"6200004"},
      "status":{"codigo":200,"mensagem":null,"quantidade":1,"tipo":"OK"}
      }
    return  axios.get(com1.API + "/consumos/checkout/?modo_venda=4&codigo=" + numero, {auth: { username: com1.USUARIO, password: com1.SENHA}}).then(function (response) {
      return Dadojson
    })
    .catch(function (error) {
      console.log("Tratar erro de conexão")
      return "Dadojson"
    })
  } 
}
function getUserAccount() {
  return 'teste2';
}

//Imprimir.SaidaDatamaxi()
const liberaHorario = '0;1;1;\r'
const liberaAntHorario = '0;2;1;\r' 

//Conectando na ENTRADA 
if(com1.ENTRADA != ''){

 function Conecta(){  
  var port = new SerialPort(com1.ENTRADA, {
    baudRate: 115200,
    dataBits: 8,
    parity: 'none',
    stopBits: 1,
    flowControl: false,
    autoOpen:true
  })   
  const parser = port.pipe(new Readline({ delimiter: '\r' }))
   console.log('conectando COM ENTRADA ...')
    port.on('open',(err) => {
      if (err) {
        console.log("deu erro ao conectar COM ENTRADA: " + err)
        statusCom1 = 1
      }else{          
      console.log('conectado COM ENTRADA')
          
    }});
    var timestamp = 1
    var timeout = 0    
    let ultimoTicket = ''
    let status =0
    parser.on('data', async function (data){  
      console.log("recebeu da com ENTRADA : " + data)   
      console.log(com1.TEMPONOVAIMPRESSAO)   
      timestamp = new Date().getTime(); 

        if(data === '0;14;1;' && timestamp >= timeout  ){  
                   
            
            
          let data = new Date().getTime();
          if(com1.TIPO ==1 && status > 0)
          {
            console.log("Aguarde o giro")
          }else{
     
            timeout = timestamp + com1.TEMPONOVAIMPRESSAO
          if(com1.INTEGRADOR == 1){

                  console.log("Integrador SQG")              
                  Promise.all([getTicketSQG()])
                  .then(function (results) {
                    const perm  = results[0];   
                    console.log(perm) 
                    if(com1.TIPO ==1){      
                      var novoTicket = perm.dados.codigoBarra                      
                    }else{ 
                      var novoTicket = perm[0].ticket
                    } 
                    console.log(novoTicket)                         

                  if(novoTicket>0 ){
                    ultimoTicket = novoTicket
                    console.log("função imprimir")
                    setTimeout(function(){
                      status = 1
                      if(com1.SENTIDOENTRADA == 1){
                        port.write(liberaHorario)
                      }else if(com1.SENTIDOENTRADA == 2){
                        port.write(liberaAntHorario)
                      }                      
                    },3000) 
                    io.emit('serial:data',{
                        value: "IMPRESSAO"  })            
                   }                  
                });     
               
                  
          }else if(com1.INTEGRADOR == 2){   //integração com datamaxi
            //função ler sequencial e pegar um numero (a implementar) 
            let novoTicket = new Date().getMinutes();
            Imprimir.GerarDatamaxi(novoTicket)
            if(novoTicket>0 ){
              ultimoTicket = novoTicket              
              console.log("função imprimir")
              setTimeout(function(){
                status = 1
                if(com1.SENTIDOENTRADA == 1){
                  port.write(liberaHorario)
                }else if(com1.SENTIDOENTRADA == 2){
                  port.write(liberaAntHorario)
                }                      
              },3000) 
              io.emit('serial:data',{
                  value: "IMPRESSAO"  })            
             }       

          }        
              
        }  
     console.log("Ultimo ticket emitido foi : " +ultimoTicket)
    }
    

    if(data === '0;12;' && com1.TIPO == 1 ){
      status = 0
      console.log("acesso nao utilizado")
      if(ultimoTicket > 0){
        ultimoTicket = 0;
        status = 0
        console.log("No sqg Realizar a saida via api")
      }
    }
    })  
    
  port.on('close', function(){
    console.log("COM ENTRADA desconectado")
    port.close(error => {console.log("COM ENTRADA : " +error)})
    Conecta()
  
  })
  
  port.on('error', (err) => {
    Conecta()
    console.log("COM ENTRADA desconectado : " + err)}
  )
  }

 Conecta()
 
}

if(com1.SAIDA != '') {
  erro = 1
  function ConectaSAIDA(){
     
    var port2 = new SerialPort(com1.SAIDA, {
      baudRate: 9600,
      dataBits: 8,
      parity: 'none',
      stopBits: 1,
      flowControl: false,
      autoOpen:true
    })   
    const parser2 = port2.pipe(new Readline({ delimiter: '\r' }))
     console.log('conectando COM SAIDA ...')
     port2.on('open',(err) => {
        if (err) {
          console.log("Erro ao Conectar COM SAIDA : " + err)
          
        }else{     

        console.log('conectado COM SAIDA')
            
      }});
  
      parser2.on('data', function (data){
        console.log("recebeu algo COM SAIDA : " + data )  
       
      })  
      
    port2.on('close', function(){
      console.log("COM SAIDA : Desconectado")
      port2.close(error => {console.log("COM SAIDA : " +error)})
      ConectaSAIDA()  
    
    })
    
    
    port2.on('error', (err) => {
     
      ConectaSAIDA()      
      
        console.log("COM SAIDA desconectado : " + err)

    
     } )}
    
  
   ConectaSAIDA()

}
/* //const portaImpressora = new SerialPort('COM12')

var portaImpressora = new SerialPort('COM12', {
  baudRate: 115200  
})   
  
portaImpressora.on('open', (err) => {
  if(err) console.log("deu erro ao conectar : " + err)
  const imprimir = 'TeSTANDOOOOO'
  portaImpressora.write(imprimir)
}) */








/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
